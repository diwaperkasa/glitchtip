/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/_allauth/browser/v1/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get configuration
         * @description There are many configuration options that alter the functionality
         *     and behavior of django-allauth, some of which can also impact the
         *     frontend. Therefore, relevant configuration options are exposed via
         *     this endpoint. The data returned is not user/authentication
         *     dependent. Hence, it suffices to only fetch this data once at boot
         *     time of your application.
         *
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Configuration"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/_allauth/browser/v1/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Login
         * @description Login using a username-password or email-password combination.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: components["requestBodies"]["Login"];
            responses: {
                200: components["responses"]["AuthenticatedByPassword"];
                /** @description An input error occurred. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not authenticated.
                 *      */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AuthenticationResponse"];
                    };
                };
                /** @description Conflict. For example, when logging in when a user is already logged in.
                 *      */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ConflictResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/_allauth/browser/v1/auth/signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Signup
         * @description Whether or not `username`, `email`, `phone` or combination of those are
         *     required depends on the configuration of django-allauth. Additionally,
         *     if a custom signup form is used there may be other custom properties
         *     required.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: components["requestBodies"]["Signup"];
            responses: {
                200: components["responses"]["AuthenticatedByPassword"];
                /** @description An input error occurred.
                 *      */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not authenticated.
                 *      */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AuthenticationResponse"];
                    };
                };
                /** @description Forbidden. For example, when signup is closed.
                 *      */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenResponse"];
                    };
                };
                /** @description Conflict. For example, when signing up while user is logged in.
                 *      */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ConflictResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/_allauth/browser/v1/auth/email/verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get email verification information
         * @description Obtain email verification information, given the token that was sent to
         *     the user by email.
         *
         */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description The email verification key */
                    "X-Email-Verification-Key": components["parameters"]["EmailVerificationKey"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["EmailVerificationInfo"];
                /** @description An input error occurred.
                 *      */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Conflict. The email verification (by code) flow is not pending.
                 *      */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ConflictResponse"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Verify an email
         * @description Complete the email verification process. Depending on the configuration,
         *     email addresses are either verified by opening a link that is sent to
         *     their email address, or, by inputting a code that is sent. On the API,
         *     both cases are handled identically. Meaning, the required key is either
         *     the one from the link, or, the code itself.
         *
         *     Note that a status code of 401 does not imply failure. It indicates that
         *     the email verification was successful, yet, the user is still not signed
         *     in. For example, in case `ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION` is set to
         *     `False`, a 401 is returned when verifying as part of login/signup.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Session token. Only needed when `client` is equal to `app`.
                     *      */
                    "X-Session-Token"?: components["parameters"]["SessionToken"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["VerifyEmail"];
            responses: {
                200: components["responses"]["Authenticated"];
                /** @description An input error occurred.
                 *      */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                401: components["responses"]["Unauthenticated"];
                /** @description Conflict. The email verification (by code) flow is not pending.
                 *      */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ConflictResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/_allauth/browser/v1/auth/email/verify/resend": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Resend email verification code
         * @description Requests a new email verification code.
         *     Requires `ACCOUNT_EMAIL_VERIFICATION_SUPPORTS_RESEND = True`.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Session token. Only needed when `client` is equal to `app`.
                     *      */
                    "X-Session-Token"?: components["parameters"]["SessionToken"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["StatusOK"];
                /** @description Conflict. The email verification (by code) flow is not pending.
                 *      */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ConflictResponse"];
                    };
                };
                429: components["responses"]["TooManyRequests"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/_allauth/browser/v1/auth/phone/verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Verify a phone number
         * @description Complete the phone number verification process. Note that a status code
         *     of 401 does not imply failure. It merely indicates that the phone number
         *     verification was successful, yet, the user is still not signed in.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Session token. Only needed when `client` is equal to `app`.
                     *      */
                    "X-Session-Token"?: components["parameters"]["SessionToken"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["VerifyPhone"];
            responses: {
                200: components["responses"]["Authenticated"];
                /** @description An input error occurred.
                 *      */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                401: components["responses"]["Unauthenticated"];
                /** @description Conflict. The phone verification flow is not pending.
                 *      */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ConflictResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/_allauth/browser/v1/auth/phone/verify/resend": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Resend phone number verification code
         * @description Requests a new phone number verification code.
         *     Requires `ACCOUNT_PHONE_VERIFICATION_SUPPORTS_RESEND = True`.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Session token. Only needed when `client` is equal to `app`.
                     *      */
                    "X-Session-Token"?: components["parameters"]["SessionToken"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["StatusOK"];
                /** @description Conflict. The phone verification flow is not pending.
                 *      */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ConflictResponse"];
                    };
                };
                429: components["responses"]["TooManyRequests"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/_allauth/browser/v1/auth/reauthenticate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reauthenticate
         * @description In order to safeguard the account, some actions require the user to be
         *     recently authenticated.  If you try to perform such an action without
         *     having been recently authenticated, a `401` status is returned, listing
         *     flows that can be performed to reauthenticate. One such flow is the flow
         *     with ID `reauthenticate`, which allows for the user to input the
         *     password. This is the endpoint related towards that flow.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Session token. Only needed when `client` is equal to `app`.
                     *      */
                    "X-Session-Token"?: components["parameters"]["SessionToken"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody: components["requestBodies"]["Reauthenticate"];
            responses: {
                200: components["responses"]["AuthenticatedByPassword"];
                /** @description An input error occurred. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/_allauth/browser/v1/auth/password/request": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Request password
         * @description Initiates the password reset procedure. Depending on whether or not
         *     `ACCOUNT_PASSWORD_RESET_BY_CODE_ENABLED` is `True`, the procedure is
         *     either stateless or stateful.
         *
         *     In case codes are used, it is stateful, and a new
         *     `password_reset_by_code` flow is started. In this case, on a successful
         *     password reset request, you will receive a 401 indicating the pending
         *     status of this flow.
         *
         *     In case password reset is configured to use (stateless) links, you will
         *     receive a 200 on a successful password reset request.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: components["requestBodies"]["RequestPassword"];
            responses: {
                200: components["responses"]["StatusOK"];
                /** @description An input error occurred.
                 *      */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                401: components["responses"]["Authentication"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/_allauth/browser/v1/auth/password/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get password reset information
         * @description Used to obtain information on and validate a password reset key.  The
         *     key passed is either the key encoded in the password reset URL that the
         *     user has received per email, or, the password reset code in case of
         *     `ACCOUNT_PASSWORD_RESET_BY_CODE_ENABLED`. Note that in case of a code,
         *     the number of requests you can make is limited (by
         *     `ACCOUNT_PASSWORD_RESET_BY_CODE_MAX_ATTEMPTS`).
         *
         */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description The password reset key */
                    "X-Password-Reset-Key": components["parameters"]["PasswordResetKey"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["PasswordResetInfo"];
                /** @description An input error occurred.
                 *      */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Conflict. There is no password reset (by code) flow pending.
                 *      */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ConflictResponse"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Reset password
         * @description Perform the password reset, by handing over the password reset key and
         *     the new password. After successfully completing the password reset, the
         *     user is either logged in (in case `ACCOUNT_LOGIN_ON_PASSWORD_RESET` is
         *     `True`), or, the user will need to proceed to the login page.  In case
         *     of the former, a `200` status code is returned, in case of the latter a
         *     401.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["ResetPassword"];
            responses: {
                200: components["responses"]["AuthenticatedByPassword"];
                /** @description An input error occurred. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                401: components["responses"]["Authentication"];
                /** @description Conflict. There is no password reset (by code) flow pending.
                 *      */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ConflictResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/_allauth/browser/v1/auth/provider/redirect": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Provider redirect
         * @description Initiates the third-party provider authentication redirect flow. As calling
         *     this endpoint results in a user facing redirect (302), this call is only
         *     available in a browser, and must be called in a synchronous (non-XHR)
         *     manner.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: components["requestBodies"]["ProviderRedirect"];
            responses: {
                /** @description The provider authorization URL to which the client should be redirected. */
                302: {
                    headers: {
                        /** @description The redirect URL. */
                        location?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/_allauth/browser/v1/auth/provider/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Provider token
         * @description Authenticates with a third-party provider using provider tokens received
         *     by other means. For example, in case of a mobile app, the authentication
         *     flow runs completely on the device itself, without any interaction with
         *     the API. Then, when the (device) authentication completes and the mobile
         *     app receives an access and/or ID token, it can hand over these tokens
         *     via this endpoint to authenticate on the server.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Session token. Only needed when `client` is equal to `app`.
                     *      */
                    "X-Session-Token"?: components["parameters"]["SessionToken"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody: components["requestBodies"]["ProviderToken"];
            responses: {
                200: components["responses"]["Authenticated"];
                /** @description An input error occurred. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not authenticated, more steps are required to be completed. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AuthenticationResponse"];
                    };
                };
                /** @description Forbidden. For example, when signup is closed.
                 *      */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/_allauth/browser/v1/auth/provider/signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Provider signup information
         * @description If, while signing up using a third-party provider account, there is
         *     insufficient information received from the provider to automatically
         *     complete the signup process, an additional step is needed to complete
         *     the missing data before the user is fully signed up and authenticated.
         *     The information available so far, such as the pending provider account,
         *     can be retrieved via this endpoint.
         *
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["ProviderSignup"];
                /** @description Conflict. The provider signup flow is not pending.
                 *      */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ConflictResponse"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Provider signup
         * @description If, while signing up using a third-party provider account, there is
         *     insufficient information received from the provider to automatically
         *     complete the signup process, an additional step is needed to complete
         *     the missing data before the user is fully signed up and authenticated.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: components["requestBodies"]["ProviderSignup"];
            responses: {
                200: components["responses"]["Authenticated"];
                /** @description An input error occurred. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not authenticated, more steps are required to be completed. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AuthenticationResponse"];
                    };
                };
                /** @description Forbidden. For example, when signup is closed.
                 *      */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenResponse"];
                    };
                };
                /** @description Conflict. The provider signup flow is not pending.
                 *      */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ConflictResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/_allauth/browser/v1/auth/2fa/authenticate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Two-factor authentication
         * @description If, during authentication,  a response with status 401 is encountered where one of the pending
         *     flows has ID `mfa_authenticate`, that indicates that the Two-Factor Authentication stage needs to
         *     be completed.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Session token. Only needed when `client` is equal to `app`.
                     *      */
                    "X-Session-Token"?: components["parameters"]["SessionToken"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody: components["requestBodies"]["MFAAuthenticate"];
            responses: {
                200: components["responses"]["AuthenticatedByPasswordAnd2FA"];
                /** @description An input error occurred. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                401: components["responses"]["Authentication"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/_allauth/browser/v1/auth/2fa/reauthenticate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reauthenticate using 2FA
         * @description In order to safeguard the account, some actions require the user to be
         *     recently authenticated.  If you try to perform such an action without
         *     having been recently authenticated, a `401` status is returned, listing
         *     flows that can be performed to reauthenticate. One such flow is the flow
         *     with ID `mfa_reauthenticate`, which allows for the user to input an
         *     authenticator code (e.g. TOTP or recovery code). This is the endpoint
         *     related towards that flow.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Session token. Only needed when `client` is equal to `app`.
                     *      */
                    "X-Session-Token"?: components["parameters"]["SessionToken"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["AuthenticatedByPasswordAnd2FA"];
                /** @description An input error occurred. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/_allauth/browser/v1/auth/webauthn/authenticate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get WebAuthn credential request options for 2FA
         * @description Returns the WebAuthn credential request options, that can be
         *     processed using `parseRequestOptionsFromJSON()` on the frontend.
         *
         */
        get: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Session token. Only needed when `client` is equal to `app`.
                     *      */
                    "X-Session-Token"?: components["parameters"]["SessionToken"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["WebAuthnRequestOptionsResponse"];
            };
        };
        put?: never;
        /**
         * Perform 2FA using WebAuthn
         * @description Perform Two-Factor Authentication using a WebAuthn credential.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Session token. Only needed when `client` is equal to `app`.
                     *      */
                    "X-Session-Token"?: components["parameters"]["SessionToken"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody: components["requestBodies"]["AuthenticateWebAuthn"];
            responses: {
                200: components["responses"]["Authenticated"];
                /** @description An input error occurred. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/_allauth/browser/v1/auth/webauthn/reauthenticate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get WebAuthn credential request options for reauthentication
         * @description Returns the WebAuthn credential request options, that can be
         *     processed using `parseRequestOptionsFromJSON()` on the frontend.
         *
         */
        get: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Session token. Only needed when `client` is equal to `app`.
                     *      */
                    "X-Session-Token"?: components["parameters"]["SessionToken"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["WebAuthnRequestOptionsResponse"];
            };
        };
        put?: never;
        /**
         * Reauthenticate using WebAuthn
         * @description Reauthenticate the user using a WebAuthn credential.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Session token. Only needed when `client` is equal to `app`.
                     *      */
                    "X-Session-Token"?: components["parameters"]["SessionToken"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody: components["requestBodies"]["ReauthenticateWebAuthn"];
            responses: {
                200: components["responses"]["Authenticated"];
                /** @description An input error occurred. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/_allauth/browser/v1/auth/webauthn/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get WebAuthn credential request options for login
         * @description Returns the WebAuthn credential request options, that can be
         *     processed using `parseRequestOptionsFromJSON()` on the frontend.
         *
         */
        get: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Session token. Only needed when `client` is equal to `app`.
                     *      */
                    "X-Session-Token"?: components["parameters"]["SessionToken"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["WebAuthnRequestOptionsResponse"];
            };
        };
        put?: never;
        /**
         * Login using WebAuthn
         * @description Login using a WebAuthn credential (Passkey). Both 200 and 401 can be
         *     expected after a successful request.  The 401 can, for example, occur
         *     when the credential passed was valid, but the email attached to the
         *     account still requires verification.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Session token. Only needed when `client` is equal to `app`.
                     *      */
                    "X-Session-Token"?: components["parameters"]["SessionToken"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody: components["requestBodies"]["LoginWebAuthn"];
            responses: {
                200: components["responses"]["Authenticated"];
                /** @description An input error occurred. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not authenticated.
                 *      */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AuthenticationResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/_allauth/browser/v1/auth/code/confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Confirm login code
         * @description Use this endpoint to pass along the received "special" login code.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: components["requestBodies"]["ConfirmLoginCode"];
            responses: {
                200: components["responses"]["AuthenticatedByCode"];
                /** @description An input error occurred. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not authenticated.
                 *      */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AuthenticationResponse"];
                    };
                };
                /** @description Conflict. The "login by code" flow is not pending.
                 *      */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ConflictResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/_allauth/browser/v1/account/providers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List the connected third-party provider accounts */
        get: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Session token. Only needed when `client` is equal to `app`.
                     *      */
                    "X-Session-Token"?: components["parameters"]["SessionToken"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["ProviderAccounts"];
            };
        };
        put?: never;
        post?: never;
        /**
         * Disconnect a third-party provider account
         *
         * @description Disconnect a third-party provider account, returning the remaining
         *     accounts that are still connected. The disconnect is not allowed if it
         *     would leave the account unusable. For example, if no password was
         *     set up yet.
         *
         */
        delete: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Session token. Only needed when `client` is equal to `app`.
                     *      */
                    "X-Session-Token"?: components["parameters"]["SessionToken"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["ProviderAccount"];
            responses: {
                200: components["responses"]["ProviderAccounts"];
                /** @description An input error occurred. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/_allauth/browser/v1/account/email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List email addresses
         * @description Retrieves the list of email addreses of the account.
         *
         */
        get: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Session token. Only needed when `client` is equal to `app`.
                     *      */
                    "X-Session-Token"?: components["parameters"]["SessionToken"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["EmailAddresses"];
                401: components["responses"]["Authentication"];
            };
        };
        /**
         * Request email verification
         * @description Requests for (another) email verification email to be sent. Note that
         *     sending emails is rate limited, so when you send too many requests the
         *     email will not be sent.
         *
         */
        put: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Session token. Only needed when `client` is equal to `app`.
                     *      */
                    "X-Session-Token"?: components["parameters"]["SessionToken"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["Email"];
            responses: {
                200: components["responses"]["StatusOK"];
                /** @description An input error occurred. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Too many email verification mails were already sent.
                 *      */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenResponse"];
                    };
                };
            };
        };
        /**
         * Add/Change email address
         *
         * @description The following functionality is available:
         *
         *       - Adding a new email address for an already signed in user (`ACCOUNT_CHANGE_EMAIL = False`).
         *       - Change to a new email address for an already signed in user   (`ACCOUNT_CHANGE_EMAIL = True`).
         *       - Change to a new email address during the email verification process at signup (`ACCOUNT_EMAIL_VERIFICATION_SUPPORTS_CHANGE = True`).
         *
         *     In all cases, an email verification mail will be sent containing a link or code that needs to be verified.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Session token. Only needed when `client` is equal to `app`.
                     *      */
                    "X-Session-Token"?: components["parameters"]["SessionToken"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["Email"];
            responses: {
                200: components["responses"]["EmailAddresses"];
                /** @description An input error occurred. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                401: components["responses"]["AuthenticationOrReauthentication"];
                /** @description Conflict. For example, when no user is authenticated and no email verification flow is pending.
                 *      */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ConflictResponse"];
                    };
                };
            };
        };
        /**
         * Remove an email address
         * @description Used to remove an email address.
         *
         */
        delete: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Session token. Only needed when `client` is equal to `app`.
                     *      */
                    "X-Session-Token"?: components["parameters"]["SessionToken"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["Email"];
            responses: {
                200: components["responses"]["EmailAddresses"];
                /** @description An input error occurred. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /**
         * Change primary email address
         * @description Used to change primary email address to a different one. Note that only verified email addresses
         *     can be marked as primary.
         *
         */
        patch: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Session token. Only needed when `client` is equal to `app`.
                     *      */
                    "X-Session-Token"?: components["parameters"]["SessionToken"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["MarkPrimaryEmail"];
            responses: {
                200: components["responses"]["EmailAddresses"];
                /** @description An input error occurred. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/_allauth/browser/v1/account/phone": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the phone number
         * @description Retrieves the phone number of the account, if any. Note that while the
         *     endpoint returns a list of phone numbers, at most one entry is returned.
         *
         */
        get: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Session token. Only needed when `client` is equal to `app`.
                     *      */
                    "X-Session-Token"?: components["parameters"]["SessionToken"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["PhoneNumbers"];
                401: components["responses"]["Authentication"];
            };
        };
        put?: never;
        /**
         * Change the phone number
         *
         * @description The following functionality is available:
         *
         *     - Initiate the phone number change process for signed in users.
         *     - Change to a new phone number during the phone number verification
         *       process at signup for unauthenticated users. Note that this requires:
         *       `ACCOUNT_PHONE_VERIFICATION_SUPPORTS_CHANGE = True`.
         *
         *     In both cases, after posting a new phone number, proceed with the phone
         *     verification endpoint to confirm the change of the phone number by
         *     posting the verification code.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Session token. Only needed when `client` is equal to `app`.
                     *      */
                    "X-Session-Token"?: components["parameters"]["SessionToken"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["Phone"];
            responses: {
                /** @description Phone number change process initiated. */
                202: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PhoneNumberChangeResponse"];
                    };
                };
                /** @description An input error occurred. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                401: components["responses"]["AuthenticationOrReauthentication"];
                /** @description Conflict. For example, when no user is authenticated and no phone verification flow is pending.
                 *      */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ConflictResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/_allauth/browser/v1/account/authenticators": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List authenticators */
        get: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Session token. Only needed when `client` is equal to `app`.
                     *      */
                    "X-Session-Token"?: components["parameters"]["SessionToken"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Authenticators"];
                401: components["responses"]["Authentication"];
                410: components["responses"]["SessionGone"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/_allauth/browser/v1/account/authenticators/totp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * TOTP authenticator status
         * @description Retrieve the information about the current TOTP authenticator, if any.
         *
         */
        get: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Session token. Only needed when `client` is equal to `app`.
                     *      */
                    "X-Session-Token"?: components["parameters"]["SessionToken"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["TOTPAuthenticator"];
                404: components["responses"]["TOTPAuthenticatorNotFound"];
                409: components["responses"]["AddAuthenticatorConflict"];
            };
        };
        put?: never;
        /**
         * Activate TOTP
         * @description The code should be provided from the consuming TOTP authenticator
         *     application which was generated using the TOTP authenticator secret
         *     retrieved from the TOTP authenticator status endpoint.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Session token. Only needed when `client` is equal to `app`.
                     *      */
                    "X-Session-Token"?: components["parameters"]["SessionToken"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["SetupTOTP"];
            responses: {
                200: components["responses"]["TOTPAuthenticator"];
                /** @description An input error occurred. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                409: components["responses"]["AddAuthenticatorConflict"];
            };
        };
        /**
         * Deactivate TOTP
         * @description Deactivates TOTP authentication. If the user authentication is not
         *     sufficiently recent, a reauthentication flow (`401`) will is presented.
         *
         */
        delete: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Session token. Only needed when `client` is equal to `app`.
                     *      */
                    "X-Session-Token"?: components["parameters"]["SessionToken"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["StatusOK"];
                401: components["responses"]["ReauthenticationRequired"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/_allauth/browser/v1/account/authenticators/recovery-codes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List recovery codes
         * @description List recovery codes.
         *
         */
        get: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Session token. Only needed when `client` is equal to `app`.
                     *      */
                    "X-Session-Token"?: components["parameters"]["SessionToken"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["RecoveryCodes"];
                401: components["responses"]["ReauthenticationRequired"];
                404: components["responses"]["NotFound"];
            };
        };
        put?: never;
        /** Regenerate recovery codes */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Session token. Only needed when `client` is equal to `app`.
                     *      */
                    "X-Session-Token"?: components["parameters"]["SessionToken"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description An input error occurred. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                401: components["responses"]["ReauthenticationRequired"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/_allauth/browser/v1/account/authenticators/webauthn": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get WebAuthn credential creation options
         *
         * @description Returns the WebAuthn credential creation options, that can be
         *     processed using `parseCreationOptionsFromJSON()` on the frontend.
         *
         */
        get: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Session token. Only needed when `client` is equal to `app`.
                     *      */
                    "X-Session-Token"?: components["parameters"]["SessionToken"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["WebAuthnCreationOptionsResponse"];
                401: components["responses"]["ReauthenticationRequired"];
                409: components["responses"]["AddAuthenticatorConflict"];
            };
        };
        /**
         * Rename a WebAuthn credential
         *
         * @description You can alter the name of a WebAuthn credential by PUT'ting the ID and
         *     name of the authenticator representing that credential. You can obtain
         *     the credentials via the "List authenticators" endpoint.
         *
         */
        put: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Session token. Only needed when `client` is equal to `app`.
                     *      */
                    "X-Session-Token"?: components["parameters"]["SessionToken"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["UpdateWebAuthn"];
            responses: {
                200: components["responses"]["WebAuthnAuthenticator"];
                401: components["responses"]["ReauthenticationRequired"];
            };
        };
        /** Add a WebAuthn credential
         *      */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Session token. Only needed when `client` is equal to `app`.
                     *      */
                    "X-Session-Token"?: components["parameters"]["SessionToken"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["AddWebAuthnAuthenticator"];
            responses: {
                200: components["responses"]["AddWebAuthnAuthenticator"];
                401: components["responses"]["ReauthenticationRequired"];
                409: components["responses"]["AddAuthenticatorConflict"];
            };
        };
        /** Delete a WebAuthn credential
         *      */
        delete: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Session token. Only needed when `client` is equal to `app`.
                     *      */
                    "X-Session-Token"?: components["parameters"]["SessionToken"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["DeleteWebAuthn"];
            responses: {
                200: components["responses"]["StatusOK"];
                401: components["responses"]["ReauthenticationRequired"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/_allauth/browser/v1/auth/session": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get authentication status
         *
         * @description Retrieve information about the authentication status for the current
         *     session.
         *
         */
        get: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Session token. Only needed when `client` is equal to `app`.
                     *      */
                    "X-Session-Token"?: components["parameters"]["SessionToken"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Authenticated"];
                401: components["responses"]["Authentication"];
                410: components["responses"]["SessionGone"];
            };
        };
        put?: never;
        post?: never;
        /**
         * Logout
         * @description Logs out the user from the current session.
         *
         */
        delete: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Session token. Only needed when `client` is equal to `app`.
                     *      */
                    "X-Session-Token"?: components["parameters"]["SessionToken"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                401: components["responses"]["Unauthenticated"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/_allauth/browser/v1/account/password/change": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Change password
         * @description In order to change the password of an account, the current and new
         *     password must be provider.  However, accounts that were created by
         *     signing up using a third-party provider do not have a password set. In
         *     that case, the current password is not required.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Session token. Only needed when `client` is equal to `app`.
                     *      */
                    "X-Session-Token"?: components["parameters"]["SessionToken"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["ChangePassword"];
            responses: {
                400: components["responses"]["Error"];
                401: components["responses"]["Authentication"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Session: {
            /** @example Mozilla Firefox */
            user_agent: string;
            /** @example 127.2.3.192 */
            ip: string;
            created_at: components["schemas"]["Timestamp"];
            is_current: boolean;
            /** @example 123 */
            id: number;
            last_seen_at?: components["schemas"]["Timestamp"];
        };
        /** @description Configuration of the Django `allauth.account` app.
         *      */
        AccountConfiguration: {
            login_methods?: ("email" | "username")[];
            is_open_for_signup: boolean;
            email_verification_by_code_enabled: boolean;
            login_by_code_enabled: boolean;
            password_reset_by_code_enabled?: boolean;
        };
        /** @description An authentication related response.
         *      */
        AuthenticationResponse: {
            /** @enum {integer} */
            status: 401;
            data: {
                flows: components["schemas"]["Flow"][];
            };
            meta: components["schemas"]["AuthenticationMeta"];
        };
        ForbiddenResponse: {
            /** @enum {integer} */
            status: 403;
        };
        ConflictResponse: {
            /** @enum {integer} */
            status: 409;
        };
        EndSessions: {
            /** @description The IDs of the sessions that are to be ended.
             *      */
            sessions: number[];
        };
        /** @description A phone number.
         *      */
        PhoneNumber: {
            /** @example +314159265359 */
            phone: string;
            verified: boolean;
        };
        PhoneNumbersResponse: {
            status: components["schemas"]["StatusOK"];
            data: components["schemas"]["PhoneNumber"][];
        };
        /** @example {
         *       "status": 202,
         *       "data": [
         *         {
         *           "phone": "+314159265359",
         *           "verified": false
         *         }
         *       ]
         *     } */
        PhoneNumberChangeResponse: {
            status: components["schemas"]["StatusAccepted"];
            data: components["schemas"]["PhoneNumber"][];
        };
        /** @description A response indicating reauthentication is required.
         *      */
        ReauthenticationResponse: {
            /** @enum {integer} */
            status: 401;
            data: components["schemas"]["Authenticated"];
            meta: components["schemas"]["AuthenticatedMeta"];
        };
        /** @description The session is expired or invalid.
         *      */
        SessionGoneResponse: {
            /** @enum {integer} */
            status: 410;
            data: Record<string, never>;
            meta: components["schemas"]["AuthenticationMeta"];
        };
        BaseAuthenticationMeta: {
            /**
             * @description The session token (`app` clients only).
             *
             * @example ufwcig0zen9skyd545jc0fkq813ghar2
             */
            session_token?: string;
            /**
             * @description The access token (`app` clients only).
             *
             * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdW
             */
            access_token?: string;
        };
        AuthenticationMeta: components["schemas"]["BaseAuthenticationMeta"] & {
            is_authenticated: boolean;
        };
        AuthenticatedMeta: components["schemas"]["BaseAuthenticationMeta"] & {
            /** @enum {boolean} */
            is_authenticated: true;
        };
        Flow: {
            /** @enum {string} */
            id: "login" | "mfa_authenticate" | "mfa_reauthenticate" | "provider_redirect" | "provider_signup" | "provider_token" | "reauthenticate" | "signup" | "verify_email" | "verify_phone";
            provider?: components["schemas"]["Provider"];
            /** @enum {boolean} */
            is_pending?: true;
        };
        Authenticated: {
            user: components["schemas"]["User"];
            /** @description A list of methods used to authenticate.
             *      */
            methods: components["schemas"]["AuthenticationMethod"][];
        };
        AuthenticationMethod: {
            /** @enum {string} */
            method: "password";
            at: components["schemas"]["Timestamp"];
            email?: components["schemas"]["Email"];
            username?: components["schemas"]["Username"];
        } | {
            /** @enum {string} */
            method: "password";
            at: components["schemas"]["Timestamp"];
            /** @enum {boolean} */
            reauthenticated: true;
        } | {
            /** @enum {string} */
            method: "socialaccount";
            at: components["schemas"]["Timestamp"];
            provider: components["schemas"]["ProviderID"];
            uid: components["schemas"]["ProviderAccountID"];
        } | {
            /** @enum {string} */
            method: "mfa";
            at: components["schemas"]["Timestamp"];
            type: components["schemas"]["AuthenticatorType"];
            reauthenticated?: boolean;
        };
        AuthenticatedResponse: {
            status: components["schemas"]["StatusOK"];
            data: components["schemas"]["Authenticated"];
            meta: components["schemas"]["AuthenticationMeta"];
        };
        MFAAuthenticate: {
            code: components["schemas"]["AuthenticatorCode"];
        };
        MFATrust: {
            trust: boolean;
        };
        ConfirmLoginCode: {
            code: components["schemas"]["Code"];
        };
        /**
         * @description The client ID (in case of OAuth2 or OpenID Connect based providers)
         *
         * @example 123.apps.googleusercontent.com
         */
        ClientID: string;
        ProviderToken: {
            provider: components["schemas"]["ProviderID"];
            process: components["schemas"]["Process"];
            /** @description The token.
             *      */
            token: {
                client_id: components["schemas"]["ClientID"];
                /**
                 * @description The ID token.
                 *
                 * @example eyJhbGciOiJI
                 */
                id_token?: string;
                /**
                 * @description The access token.
                 *
                 * @example 36POk6yJV_adQs
                 */
                access_token?: string;
            };
        };
        ProviderRedirect: {
            provider: components["schemas"]["ProviderID"];
            /**
             * @description The URL to return to after the redirect flow is complete.
             *
             *     Note that this is not to be mistaken with the callback URL that you
             *     configure over at the OAuth provider during the OAuth app/client
             *     setup. The flow is as follows:
             *
             *       1. Your frontend redirects to the headless provider redirect
             *          endpoint in a synchronous (non-XHR) manner, informing allauth
             *          (by means of `callback_url`) where to redirect to after the
             *          provider handshake is completed.
             *
             *       2. Headless will redirect to the (OAuth) identity provider to
             *          initiate the handshake, passing along a different callback URL
             *          to the provider: one that points to an allauth backend URL.
             *          This is the URL that you need to have setup at your OAuth
             *          app/client configuration. Note that this must be a backend URL
             *          as providers can use POST requests to perform their callbacks,
             *          which is something a frontend would not be able to handle.
             *
             *       3. After the authorization at the provider is completed, the
             *          provider redirects to the *backend* allauth callback URL, which
             *          will then redirect back to the *frontend* callback URL.
             *
             *       4. Your frontend is now expected to fetch the current session to
             *          determine what the next course of action is. The user could be
             *          authenticated at this point, or another flow is pending
             *          (e.g. email verification, or, provider signup). In case of
             *          errors a `?error=` is passed to the frontend callback URL.
             *
             * @example https://app.project.org/account/provider/callback
             */
            callback_url: string;
            process: components["schemas"]["Process"];
        };
        RequestPassword: {
            email: components["schemas"]["Email"];
        };
        RequestLoginCode: {
            phone: components["schemas"]["Phone"];
        } | {
            email: components["schemas"]["Email"];
        };
        Reauthenticate: {
            password: components["schemas"]["Password"];
        };
        ProviderSignup: components["schemas"]["BaseSignup"];
        PasskeySignup: components["schemas"]["BaseSignup"];
        BaseSignup: {
            email: components["schemas"]["Email"];
        };
        Signup: components["schemas"]["BaseSignup"] & {
            password: components["schemas"]["Password"];
        };
        /**
         * @description The username.
         *
         * @example wizard
         */
        Username: string;
        /**
         * @description The email address.
         *
         * @example email@domain.org
         */
        Email: string;
        /**
         * @description The phone number.
         *
         * @example +314159265359
         */
        Phone: string;
        Login: {
            password: components["schemas"]["Password"];
        } & ({
            username: components["schemas"]["Username"];
        } | {
            email: components["schemas"]["Email"];
        } | {
            phone: components["schemas"]["Phone"];
        });
        /** @enum {integer} */
        StatusOK: 200;
        /** @enum {integer} */
        StatusAccepted: 202;
        /**
         * @description Authenticator ID.
         *
         * @example 123
         */
        AuthenticatorID: number;
        /** @description Configuration of the Django `allauth.socialaccount` app.
         *      */
        SocialAccountConfiguration: {
            providers: components["schemas"]["ProviderList"];
        };
        /** @description Configuration of the Django `allauth.mfa` app.
         *      */
        MFAConfiguration: {
            /** @description Matches `settings.MFA_SUPPORTED_TYPES`.
             *      */
            supported_types: components["schemas"]["AuthenticatorType"][];
        };
        /** @description Configuration of the Django `allauth.usersessions` app.
         *      */
        UserSessionsConfiguration: {
            /** @description Matches `settings.USERSESSIONS_TRACK_ACTIVITY`.
             *      */
            track_activity: boolean;
        };
        /** @example {
         *       "status": 200,
         *       "data": {
         *         "account": {
         *           "authentication_method": "email"
         *         },
         *         "socialaccount": {
         *           "providers": [
         *             {
         *               "id": "google",
         *               "name": "Google",
         *               "flows": [
         *                 "provider_redirect",
         *                 "provider_token"
         *               ],
         *               "client_id": "123.apps.googleusercontent.com",
         *               "openid_configuration_url": "https://accounts.google.com/.well-known/openid-configuration"
         *             }
         *           ]
         *         },
         *         "mfa": {
         *           "supported_types": [
         *             "recovery_codes",
         *             "totp"
         *           ]
         *         },
         *         "usersessions": {
         *           "track_activity": false
         *         }
         *       }
         *     } */
        ConfigurationResponse: {
            data: {
                account: components["schemas"]["AccountConfiguration"];
                socialaccount?: components["schemas"]["SocialAccountConfiguration"];
                mfa?: components["schemas"]["MFAConfiguration"];
                usersessions?: components["schemas"]["UserSessionsConfiguration"];
            };
            status: components["schemas"]["StatusOK"];
        };
        ResetPassword: {
            /**
             * @description The password reset key
             * @example 2f-c4nqd4-e07d9bc694f9f28cd4fe92569d495333
             */
            key: string;
            password: components["schemas"]["Password"];
        };
        VerifyEmail: {
            /**
             * @description The email verification key
             * @example 2f-c4nqd4-e07d9bc694f9f28cd4fe92569d495333
             */
            key: string;
        };
        VerifyPhone: {
            /**
             * @description The phone verification code
             * @example 4S3H82
             */
            code: string;
        };
        OptionalTimestamp: components["schemas"]["Timestamp"];
        /**
         * @description An epoch based timestamp (trivial to parse using: `new Date(value)*1000`)
         *
         * @example 1711555057.065702
         */
        Timestamp: number;
        /**
         * @description An authenticator code.
         *
         * @example 314159
         */
        AuthenticatorCode: string;
        /**
         * @description An one-time code.
         *
         * @example NQ3TM5
         */
        Code: string;
        /**
         * @description The type of authenticator.
         *
         * @enum {string}
         */
        AuthenticatorType: "recovery_codes" | "totp";
        /**
         * @description The password.
         *
         * @example Alohomora!
         */
        Password: string;
        ErrorResponse: {
            /**
             * @example 400
             * @enum {integer}
             */
            status?: 400;
            errors?: {
                /**
                 * @description An error code.
                 *
                 * @example invalid
                 */
                code: string;
                /**
                 * @description The name of the input parameter that was incorrect.
                 *
                 * @example email
                 */
                param?: string;
                /**
                 * @description A human readable error message.
                 *
                 * @example Enter a valid email address.
                 */
                message: string;
            }[];
        };
        /**
         * @description The process to be executed when the user successfully
         *     authenticates. When set to `login`, the user will be logged into the
         *     account to which the provider account is connected, or if no such
         *     account exists, a signup will occur. If set to `connect`, the provider
         *     account will be connected to the list of provider accounts for the
         *     currently authenticated user.
         *
         * @example login
         * @enum {string}
         */
        Process: "login" | "connect";
        /**
         * @description The provider ID.
         *
         * @example google
         */
        ProviderID: string;
        /**
         * @description The provider specific account ID.
         *
         * @example goo12345
         */
        ProviderAccountID: string;
        User: {
            /** @description The user ID.
             *      */
            id?: number | string;
            /**
             * @description The display name for the user.
             *
             * @example Magic Wizard
             */
            display?: string;
            /**
             * @description Whether or not the account has a password set.
             *
             * @example true
             */
            has_usable_password?: boolean;
            email?: components["schemas"]["Email"];
            username?: components["schemas"]["Username"];
        };
        EmailAddress: {
            email: components["schemas"]["Email"];
            /** @example true */
            primary: boolean;
            /** @example false */
            verified: boolean;
        };
        BaseAuthenticator: {
            last_used_at: components["schemas"]["OptionalTimestamp"];
            created_at: components["schemas"]["Timestamp"];
        };
        TOTPAuthenticator: components["schemas"]["BaseAuthenticator"] & {
            /** @enum {string} */
            type: "totp";
        };
        WebAuthnAuthenticator: components["schemas"]["BaseAuthenticator"] & {
            /** @enum {string} */
            type: "webauthn";
            id: components["schemas"]["AuthenticatorID"];
            /** @example Master key */
            name: string;
            /** @description Whether or not this authenticator represents a passkey. Absent if it is not specified.
             *      */
            is_passwordless?: boolean;
        };
        RecoveryCodesAuthenticator: components["schemas"]["BaseAuthenticator"] & {
            /**
             * @description The authenticator type.
             *
             * @enum {string}
             */
            type: "recovery_codes";
            /**
             * @description The total number of recovery codes that initially were available.
             *
             * @example 10
             */
            total_code_count: number;
            /**
             * @description The number of recovery codes that are unused.
             *
             * @example 7
             */
            unused_code_count: number;
        };
        SensitiveRecoveryCodesAuthenticator: components["schemas"]["RecoveryCodesAuthenticator"] & {
            /** @description The list of unused codes.
             *      */
            unused_codes: components["schemas"]["AuthenticatorCode"][];
        };
        AuthenticatorList: (components["schemas"]["TOTPAuthenticator"] | components["schemas"]["RecoveryCodesAuthenticator"] | components["schemas"]["WebAuthnAuthenticator"])[];
        ProviderList: components["schemas"]["Provider"][];
        Provider: {
            /**
             * @description The provider ID.
             *
             * @example google
             */
            id: string;
            /**
             * @description The name of the provider.
             *
             * @example Google
             */
            name: string;
            /**
             * @description The client ID (in case of OAuth2 or OpenID Connect based providers)
             *
             * @example 123.apps.googleusercontent.com
             */
            client_id?: string;
            /**
             * @description The OIDC discovery or well-known URL (in case of OAuth2 or OpenID Connect based providers)
             *
             * @example https://accounts.google.com/.well-known/openid-configuration
             */
            openid_configuration_url?: string;
            /** @description The authentication flows the provider integration supports.
             *      */
            flows: ("provider_redirect" | "provider_token")[];
        };
        ProviderAccount: {
            uid: components["schemas"]["ProviderAccountID"];
            /**
             * @description A name derived from the third-party provider account data.
             *
             * @example Wizzkid
             */
            display: string;
            provider: components["schemas"]["Provider"];
        };
        EmailVerificationInfo: {
            status: components["schemas"]["StatusOK"];
            data: {
                email: components["schemas"]["Email"];
                user: components["schemas"]["User"];
            };
            meta: {
                is_authenticating: boolean;
            };
        };
        WebAuthnCredentialRequestOptions: {
            /** @example {
             *       "status": 200,
             *       "data": {
             *         "request_options": {
             *           "publicKey": {
             *             "challenge": "aOecJJtLA2e-Dj2WU-zbRoJewbQqSUPxoA9EzsUL72o",
             *             "rpId": "localhost",
             *             "allowCredentials": [],
             *             "userVerification": "preferred"
             *           }
             *         }
             *       }
             *     } */
            request_options: Record<string, never>;
        };
        WebAuthnCredentialCreationOptions: {
            /** @example {
             *       "status": 200,
             *       "data": {
             *         "request_options": {
             *           "publicKey": {
             *             "challenge": "aOecJJtLA2e-Dj2WU-zbRoJewbQqSUPxoA9EzsUL72o",
             *             "rpId": "localhost",
             *             "allowCredentials": [],
             *             "userVerification": "preferred"
             *           }
             *         }
             *       }
             *     } */
            creation_options: Record<string, never>;
        };
        /** @example {
         *       "credential": {
         *         "type": "public-key",
         *         "id": "-J4JNfPfnLyRSMK4R...",
         *         "rawId": "-J4JNfPfnLyRSMK4R...",
         *         "authenticatorAttachment": "cross-platform",
         *         "response": {
         *           "clientDataJSON": "eyJjaGFsbGVuZ2UiOi...",
         *           "authenticatorData": "SZYN5YgO...",
         *           "signature": "MEUCIE-7sqILygPqGbrRZ4j2nqeqUU...",
         *           "userHandle": "Mg..."
         *         },
         *         "clientExtensionResults": {}
         *       }
         *     } */
        WebAuthnCredential: Record<string, never>;
    };
    responses: {
        /** @description The account prohibits adding an authenticator, e.g. because of an unverified email address.
         *      */
        AddAuthenticatorConflict: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ConflictResponse"];
            };
        };
        /** @description Not authenticated. */
        Authentication: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["AuthenticationResponse"];
            };
        };
        /** @description List of authenticators.
         *      */
        Authenticators: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    status: components["schemas"]["StatusOK"];
                    data: components["schemas"]["AuthenticatorList"];
                };
            };
        };
        /** @description Authenticated by password.
         *      */
        AuthenticatedByPassword: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["AuthenticatedResponse"];
            };
        };
        /** @description Authenticated by code.
         *      */
        AuthenticatedByCode: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["AuthenticatedResponse"];
            };
        };
        /** @description Authenticated by password and 2FA.
         *      */
        AuthenticatedByPasswordAnd2FA: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["AuthenticatedResponse"];
            };
        };
        /** @description The response indicates authentication or re-authentication is required.
         *      */
        AuthenticationOrReauthentication: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["AuthenticationResponse"] | components["schemas"]["ReauthenticationResponse"];
            };
        };
        /** @description The django-allauth configuration.
         *      */
        Configuration: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ConfigurationResponse"];
            };
        };
        /** @description List of email addresses.
         *      */
        EmailAddresses: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    status: components["schemas"]["StatusOK"];
                    data: components["schemas"]["EmailAddress"][];
                };
            };
        };
        /** @description Email verification information. */
        EmailVerificationInfo: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["EmailVerificationInfo"];
            };
        };
        /** @description An input error occurred. */
        Error: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description A forbidden response.
         *      */
        Forbidden: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ForbiddenResponse"];
            };
        };
        /** @description Not found.
         *      */
        NotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @enum {integer} */
                    status: 404;
                };
            };
        };
        /** @description Information about the password reset key. */
        PasswordResetInfo: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    status: components["schemas"]["StatusOK"];
                    data: {
                        user?: components["schemas"]["User"];
                    };
                };
            };
        };
        /** @description List of phone numbers.
         *      */
        PhoneNumbers: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["PhoneNumbersResponse"];
            };
        };
        /** @description List of third-party provider accounts.
         *      */
        ProviderAccounts: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    status: components["schemas"]["StatusOK"];
                    data: components["schemas"]["ProviderAccount"][];
                };
            };
        };
        /** @description Information relating to the pending provider signup.
         *      */
        ProviderSignup: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    status: components["schemas"]["StatusOK"];
                    data: {
                        email: components["schemas"]["EmailAddress"][];
                        account: components["schemas"]["ProviderAccount"];
                        user: components["schemas"]["User"];
                    };
                };
            };
        };
        /** @description The response indicates reauthentication is required.
         *      */
        ReauthenticationRequired: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": unknown;
            };
        };
        /** @description Information on the recovery codes.
         *      */
        RecoveryCodes: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    status: components["schemas"]["StatusOK"];
                    data: components["schemas"]["SensitiveRecoveryCodesAuthenticator"];
                };
            };
        };
        /** @description List of sessions.
         *      */
        Sessions: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    status: components["schemas"]["StatusOK"];
                    data: components["schemas"]["Session"][];
                };
            };
        };
        /** @description The response indicates session is invalid or no longer exists.
         *      */
        SessionGone: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["SessionGoneResponse"];
            };
        };
        /** @description A success response.
         *      */
        StatusOK: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    status: components["schemas"]["StatusOK"];
                };
            };
        };
        /** @description Too many requests.
         *      */
        TooManyRequests: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @enum {integer} */
                    status: 429;
                };
            };
        };
        /** @description Information on the TOTP authenticator.
         *      */
        TOTPAuthenticator: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    status: components["schemas"]["StatusOK"];
                    data: components["schemas"]["TOTPAuthenticator"];
                };
            };
        };
        /** @description No TOTP authenticator has been set up.
         *      */
        TOTPAuthenticatorNotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @enum {integer} */
                    status: 404;
                    meta: {
                        /**
                         * @description A TOTP secret that can be used to setup a new authenticator.
                         *
                         * @example J4ZKKXTK7NOVU7EPUVY23LCDV4T2QZYM
                         */
                        secret: string;
                        /**
                         * @description otpauth URI from which a QR code can be generated and scanned by OTP clients.
                         *
                         * @example otpauth://totp/Example:alice@fsf.org?secret=JBSWY3DPEHPK3PXP&issuer=Example
                         */
                        totp_url: string;
                    };
                };
            };
        };
        /** @description There is no authenticated session.
         *      */
        Unauthenticated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["AuthenticationResponse"];
            };
        };
        /** @description The user is authenticated. */
        Authenticated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["AuthenticatedResponse"];
            };
        };
        /** @description WebAuthn credential request options. */
        WebAuthnRequestOptionsResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    status: components["schemas"]["StatusOK"];
                    data: components["schemas"]["WebAuthnCredentialRequestOptions"];
                };
            };
        };
        /** @description WebAuthn credential creation options. */
        WebAuthnCreationOptionsResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    status: components["schemas"]["StatusOK"];
                    data: components["schemas"]["WebAuthnCredentialCreationOptions"];
                };
            };
        };
        /** @description A WebAuthn authenticator. */
        WebAuthnAuthenticator: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    status: components["schemas"]["StatusOK"];
                    data: components["schemas"]["WebAuthnAuthenticator"];
                };
            };
        };
        /** @description A WebAuthn authenticator. */
        AddWebAuthnAuthenticator: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    status: components["schemas"]["StatusOK"];
                    data: components["schemas"]["WebAuthnAuthenticator"];
                    meta: {
                        /** @description Whether or not recovery codes where generated automatically.
                         *      */
                        recovery_codes_generated?: boolean;
                    };
                };
            };
        };
    };
    parameters: {
        /** @description The email verification key */
        EmailVerificationKey: string;
        /** @description The password reset key */
        PasswordResetKey: string;
        /** @description Session token. Only needed when `client` is equal to `app`.
         *      */
        SessionToken: string;
    };
    requestBodies: {
        /** @description Login. */
        Login: {
            content: {
                "application/json": components["schemas"]["Login"];
            };
        };
        /** @description Login using WebAuthn. */
        LoginWebAuthn: {
            content: {
                "application/json": {
                    credential: components["schemas"]["WebAuthnCredential"];
                };
            };
        };
        /** @description Reauthenticate using WebAuthn. */
        ReauthenticateWebAuthn: {
            content: {
                "application/json": {
                    credential: components["schemas"]["WebAuthnCredential"];
                };
            };
        };
        /** @description Authenticate using WebAuthn. */
        AuthenticateWebAuthn: {
            content: {
                "application/json": {
                    credential: components["schemas"]["WebAuthnCredential"];
                };
            };
        };
        MFAAuthenticate: {
            content: {
                "application/json": components["schemas"]["MFAAuthenticate"];
            };
        };
        MFATrust: {
            content: {
                "application/json": components["schemas"]["MFATrust"];
            };
        };
        ConfirmLoginCode: {
            content: {
                "application/json": components["schemas"]["ConfirmLoginCode"];
            };
        };
        EndSessions: {
            content: {
                "application/json": components["schemas"]["EndSessions"];
            };
        };
        /** @description Signup using a passkey */
        PasskeySignup: {
            content: {
                "application/json": components["schemas"]["PasskeySignup"];
            };
        };
        ProviderAccount: {
            content: {
                "application/json": {
                    provider: components["schemas"]["ProviderID"];
                    account: components["schemas"]["ProviderAccountID"];
                };
            };
        };
        /** @description Initiate the provider redirect flow.
         *      */
        ProviderRedirect: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["ProviderRedirect"];
            };
        };
        /** @description Provider signup. */
        ProviderSignup: {
            content: {
                "application/json": components["schemas"]["ProviderSignup"];
            };
        };
        ProviderToken: {
            content: {
                "application/json": components["schemas"]["ProviderToken"];
            };
        };
        /** @description Reauthenticate. */
        Reauthenticate: {
            content: {
                "application/json": components["schemas"]["Reauthenticate"];
            };
        };
        /** @description Request password. */
        RequestPassword: {
            content: {
                "application/json": components["schemas"]["RequestPassword"];
            };
        };
        /** @description Request a login code. */
        RequestLoginCode: {
            content: {
                "application/json": components["schemas"]["RequestLoginCode"];
            };
        };
        SetupTOTP: {
            content: {
                "application/json": {
                    code: components["schemas"]["AuthenticatorCode"];
                };
            };
        };
        /** @description Signup */
        Signup: {
            content: {
                "application/json": components["schemas"]["Signup"];
            };
        };
        ChangePassword: {
            content: {
                "application/json": {
                    current_password?: components["schemas"]["Password"];
                    /**
                     * @description The current password.
                     *
                     * @example Aberto!
                     */
                    new_password: string;
                };
            };
        };
        Email: {
            content: {
                "application/json": {
                    /**
                     * @description An email address.
                     *
                     * @example email@domain.org
                     */
                    email: string;
                };
            };
        };
        MarkPrimaryEmail: {
            content: {
                "application/json": {
                    /**
                     * @description An email address.
                     *
                     * @example email@domain.org
                     */
                    email: string;
                    /**
                     * @description Primary flag.
                     *
                     * @enum {boolean}
                     */
                    primary: true;
                };
            };
        };
        Phone: {
            content: {
                "application/json": {
                    /** @example +314159265359 */
                    phone: string;
                };
            };
        };
        ResetPassword: {
            content: {
                "application/json": components["schemas"]["ResetPassword"];
            };
        };
        VerifyEmail: {
            content: {
                "application/json": components["schemas"]["VerifyEmail"];
            };
        };
        VerifyPhone: {
            content: {
                "application/json": components["schemas"]["VerifyPhone"];
            };
        };
        UpdateWebAuthn: {
            content: {
                "application/json": {
                    id?: components["schemas"]["AuthenticatorID"];
                    /** @example Master key */
                    name?: string;
                };
            };
        };
        AddWebAuthnAuthenticator: {
            content: {
                "application/json": {
                    /** @example Master key */
                    name?: string;
                    credential: components["schemas"]["WebAuthnCredential"];
                };
            };
        };
        DeleteWebAuthn: {
            content: {
                "application/json": {
                    /** @description The IDs of the authenticator that are to be deleted.
                     *      */
                    authenticators: components["schemas"]["AuthenticatorID"][];
                };
            };
        };
    };
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
